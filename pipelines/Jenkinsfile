def version = ''
def unique_id = ''

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')),
  disableConcurrentBuilds()
])

node ('') {
  env.DEV_PROJECT = "dev"
  env.APP_NAME = "user"
  env.sonar = ""
}

// Run on docker nodes
node (''){

  try {
    echo '###THIS JENKINS IS FROM DEVELOP UserNew BRANCH test9...###'
    def ocDir //= tool "oc-3.6.1"
    def mavenPath = tool 'M3'
    echo '### ' + mavenPath
    def app_image

    stage('Initialize') {
      echo '###Initializing...###'
      env.PATH = "${tool 'M3'}/bin:${env.PATH}"
      echo '### Maven path ' + "${tool 'M3'}/bin:${env.PATH}" + ' ###'
      //env.PATH = "${tool 'oc-3.6.1'}:${env.PATH}"
    }

    stage('Checkout') {
      echo '###before checkout...###'
      checkout scm
      //checkout([$class: 'GitSCM', branches: [[name: '*/develop']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'PreBuildMerge', options: [mergeRemote: 'origin', mergeTarget: 'master']]], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/Ashwin-Deshmukh-REISystems/REISystems-USCIS-ODOS2-usernew.git']]])
      
      //sh 'git checkout master'
      //sh 'git merge origin/develop'
      
      echo '###after checkout...###'
      
      echo 'branch name -> ' + env.BRANCH_NAME
      if ( env.BRANCH_NAME == 'develop' ) {
          version = "0.0.1-dev"
      } else if ( env.BRANCH_NAME == 'master' ) {
          version = "0.0.1"
      } else {
          def subName = env.BRANCH_NAME.replaceAll('/','')
          version = "0.0.1-${subName}"
      }

      env.VERSION=version
      currentBuild.displayName = version
      unique_id = "${env.BUILD_NUMBER}"
      echo '### ' + unique_id + ' ###'
    }

    if ( env.BRANCH_NAME.startsWith('PR-') ) {

      // extract id from PR
      //pull_request_id = env.BRANCH_NAME.findAll( /\d+/ )*.toInteger()

      // create a docker tag with PR number

    }

    if ( env.BRANCH_NAME != 'master' ) {

      stage('Build') {
        sh "mvn clean package"
      }

      stage('SonarQube Code Analysis') {

        withSonarQubeEnv('SonarQube') {
          sh "mvn -B sonar:sonar"
        }

        timeout(time: 5, unit: 'MINUTES') { // Just in case something goes wrong, pipeline will be killed after a timeout
          def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
            if (qg.status == 'ERROR') {
              echo "Pipeline aborted due to quality gate failure: ${qg.status}"
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
        }
      }
      
      stage('Build Docker Image') {
        echo '### before build docker ###'
          app_image = docker.build("testashwin/usernew")
        echo '### after build docker ###'
          docker.withRegistry('https://nexus.reisystems.io/','jenkins-nexus-authentication') {
            echo '### docker with registry ###'
            app_image.push(version)
            app_image.push("dev")
          }
        }
      
      
      stage('Integration Tests') {

            String appLabel = "user-$unique_id"
            String paramAppName = "APP_NAME=user-$unique_id"
            String paramAppVersion = "APP_VERSION=$version"
            echo "### " + "user-$unique_id" + " " + "APP_NAME=user-$unique_id" + " " + "APP_VERSION=$version" + " ###"
            stage('Creating Test Environment') {
              //openshift.withCluster( 'https://console.52.55.203.187.nip.io:8443','openshift-authentication' ) {
              openshift.withCluster('deploycluster'){
                //echo '### before login ###'
                //openshift.raw("login","-u","admin","-p","1212")
                //echo '### after login ###'
                //openshift.raw("whoami")
                //echo '### after whoami ###'
                //openshift.withCredentials('cnU0uJLoySKPnS-NBm1xFykSWHOj1WQbjnK6weIvPX8'){
                //openshift.withCredentials('openshift-authentication'){
                echo '### in cluster ###'
                openshift.verbose()
                // parse template
                echo '### before process ###'
                //def templatePath = 'https://raw.githubusercontent.com/Ashwin-Deshmukh-REISystems/REISystems-USCIS-ODOS2-usernew/develop/openshift/deploy-ci-template.yaml' 
                //def templateName = 'deploy-ci-template' 
                //openshift.selector("all", [ template : templateName ]).delete()
                //  echo '### after delete ###'
                //openshift.newApp(templatePath)
                  //echo '### after newapp ###'
                  //def ocVersion = openshift.process("version")
                  //def models = openshift.process("-f", templatePath, "-p", "PROJECT_NAME=dev", "-p", paramAppName, "-p", paramAppVersion )
                 // parse template
                
                  stage('Deploy to Dev') {
                    //withEnv(["PATH+OC=${ocDir}"]) {
                      openshift.withCluster( 'deploycluster' ) {
                        //openshift.verbose()
                        def result = openshift.raw('import-image nexus.reisystems.io:5000/testashwin/usernew:dev --insecure=true --confirm')
                        echo "Result: ${result.out}"
                      }
                    //}
                  }
                
                
                //def models = openshift.process( "cicd//uscis-odos-user-ci-deploy-template", "-p", "PROJECT_NAME=dev", "-p", paramAppName, "-p", paramAppVersion )
                //echo '### after process ###'
                // create objects
                //def created = openshift.create( models )
                //echo '### after create ###'
                // deploy container
                //def deployment = openshift.selector( 'dc', [ app: appLabel ] ).deploy()
                //echo '### after selector ###'
                // timer until pod is ready
                //def dcs = created.narrow("dc")
                //timeout(5) {
                //  // Find a least one pod related to the DeploymentConfig and wait it satisfies a condition
                //  dcs.related('pods').untilEach(1) {
                //    return it.object().status.phase != 'Pending'
                //  }
                //}
                /*
                // since this app always take a bit to start due to building
                sleep(120)
                */
                
                // timer until health app
                /*timeout(5) {
                  while ({
                      URL url = new URL("http://user-${unique_id}-dev.apps.ocp.uscis-fads.reisys.io/actuator/health");
                      HttpURLConnection connection = (HttpURLConnection)url.openConnection();
                      connection.setRequestMethod("GET");
                      connection.connect();
                      int code = connection.getResponseCode();
                      connection.disconnect();
                      return ( code != 200 );
                  }()) continue
                }*/
              }
            //}
            }
      }
      /*
      stage('Creating Test Environment') {
                echo '### before cluster ###'
              openshift.withCluster( 'deploycluster' ) {
                echo '### after cluster ###'  
                openshift.verbose()
              }
      }
      */
      
      /*
      stage('Fortify Security Code Analysis') {
        sh "mkdir -p sca-maven-plugin && tar -xvzf /opt/HPE_Security/Fortify_SCA_and_Apps_17.20/plugins/maven/maven-plugin-bin.tar.gz -C sca-maven-plugin"
        sh "cd sca-maven-plugin && mvn install:install-file -Dfile=pom.xml -DpomFile=pom.xml && mvn install:install-file -Dfile=xcodebuild/pom.xml -DpomFile=xcodebuild/pom.xml && mvn install:install-file -Dfile=sca-maven-plugin/sca-maven-plugin-17.20.jar -DpomFile=sca-maven-plugin/pom.xml"
        sh "sourceanalyzer -b ${env.BUILD_ID} -clean"
        sh "sourceanalyzer -b ${env.BUILD_ID} mvn"
        sh "sourceanalyzer -b ${env.BUILD_ID} -scan -f result.fpr"
        sh "cp -f result.fpr /var/lib/jenkins/workspace/odos/Reservation-Post-Build/result.fpr"
      }
      */
      /*if ( env.BRANCH_NAME != 'master' ) {

        stage('Build Docker Image') {

          app_image = docker.build("uscis-odos/user")

          docker.withRegistry('https://nexus.uscis-fads.local:9443', 'jenkins-nexus-auth') {
            app_image.push(version)
            app_image.push("dev")
          }
        }

        stage('Twistlock Scan') {
          twistlockScan ca: '', cert: '', compliancePolicy: 'warn', dockerAddress: 'unix:///var/run/docker.sock', gracePeriodDays: 0, ignoreImageBuildTime: true, image: 'uscis-odos/user-${version}', key: '', logLevel: 'true', policy: 'warn', requirePackageUpdate: false, timeout: 3
        }

        if ( env.BRANCH_NAME == 'develop' ) {

          stage('Integration Tests') {

            String appLabel = "user-$unique_id"
            String paramAppName = "APP_NAME=user-$unique_id"
            String paramAppVersion = "APP_VERSION=$version"

            stage('Creating Test Environment') {
              openshift.withCluster( 'dev' ) {
                //openshift.verbose()
                // parse template
                uscis-odos-user-ci-deploy-template
                def models = openshift.process( "dev//uscis-odos-user-ci-deploy-template", "-p", "PROJECT_NAME=dev", "-p", paramAppName, "-p", paramAppVersion )
                // create objects
                def created = openshift.create( models )
                // deploy container
                def deployment = openshift.selector( 'dc', [ app: appLabel ] ).deploy()
                // timer until pod is ready
                def dcs = created.narrow("dc")
                timeout(5) {
                  // Find a least one pod related to the DeploymentConfig and wait it satisfies a condition
                  dcs.related('pods').untilEach(1) {
                    return it.object().status.phase != 'Pending'
                  }
                }

                // since this app always take a bit to start due to building
                sleep(120)

                // timer until health app
                timeout(5) {
                  while ({
                      URL url = new URL("http://user-${unique_id}-dev.apps.ocp.uscis-fads.reisys.io/actuator/health");
                      HttpURLConnection connection = (HttpURLConnection)url.openConnection();
                      connection.setRequestMethod("GET");
                      connection.connect();
                      int code = connection.getResponseCode();
                      connection.disconnect();
                      return ( code != 200 );
                  }()) continue
                }
              }
            }

            stage('Running Zap Tests') {
              sh """
              # Cleanup
              rm -rf \${WORKSPACE}/zap*
              # Start ZAP, specifying a new session in the current workspace, as a background process
              /opt/zap/zap.sh -daemon -config api.disablekey=true -newsession \${WORKSPACE}/zap -port 9092 &
              # Save ZAP's PID to use later
              ZAP_PID=\$!
              echo "\$ZAP_PID";
              # While ZAP is still starting up, sleep one second
              until netstat -anp | grep 9092 | grep LISTEN
              do
                  if [[ \$counter = 30 ]];
                  then
                    exit 1;
                  fi;
                  echo "sleeping \$counter";
                  counter=\$((counter+1));
                  sleep 1s;
              done
              echo "done sleeping";
              curl -k -x localhost:9092 http://user-${unique_id}-dev.apps.ocp.uscis-fads.reisys.io/actuator/health
              # While ZAP is still running, download the html report using the ZAP API
              curl -o zap-report.html http://localhost:9092/OTHER/core/other/htmlreport/?
              # Finally, kill the ZAP process
              kill \$ZAP_PID
              """

              publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '.', reportFiles: 'zap-report.html', reportName: 'Zap Test Report', reportTitles: 'ODOS Tests'])
            }

            stage('Tearing Down Test Environment') {

              openshift.withCluster( 'dev' ) {
                //openshift.verbose()

                  // remove deployment config
                  openshift.selector('dc', [ app: appLabel ]).delete()
                  openshift.selector('svc', [ app: appLabel ]).delete()
                  openshift.selector('route', [ app: appLabel ]).delete()
                  openshift.selector('is', [ app: appLabel ]).delete()
              }
            }
          }
        }
      }*/


      /*if ( env.BRANCH_NAME == 'develop' ) {
        stage('Deploy to Dev') {
          withEnv(["PATH+OC=${ocDir}"]) {
            openshift.withCluster( 'dev' ) {
              //openshift.verbose()
              def result = openshift.raw('import-image nexus.uscis-fads.local:9443/uscis-odos/user:dev --insecure=true --confirm')
              echo "Result: ${result.out}"
            }
          }
        }
      }*/

    }

    /*if ( env.BRANCH_NAME == 'master' ) {
      stage('Deploy to Prod') {

        // pull the image
        sh "docker pull nexus.uscis-fads.local:9443/uscis-odos/user:dev"

        // tag the freshly pulled image as prod
        sh "docker tag nexus.uscis-fads.local:9443/uscis-odos/user:dev nexus.uscis-fads.local:9443/uscis-odos/user:prod"

        docker.withRegistry('https://nexus.uscis-fads.local:9443', 'jenkins-nexus-auth') {
          app_image = docker.image("nexus.uscis-fads.local:9443/uscis-odos/user:prod")
          app_image.push()
        }

        withEnv(["PATH+OC=${ocDir}"]) {
          openshift.withCluster( 'dev' ) {
            openshift.withProject( 'prod' ) {
              def result = openshift.raw('import-image nexus.uscis-fads.local:9443/uscis-odos/user:prod --insecure=true --confirm')
              echo "Result: ${result.out}"
            }
          }
        }
      }
    }*/

  } catch ( e) {
    currentBuild.result = 'FAILURE'
    notifyFailure()
    println e.getMessage()
    throw e
  }
}

def notifyFailure() {
    emailext body: '$DEFAULT_CONTENT',
      recipientProviders: [
        [$class: 'CulpritsRecipientProvider'],
        [$class: 'DevelopersRecipientProvider'],
        [$class: 'RequesterRecipientProvider']
      ],
      replyTo: '$DEFAULT_REPLYTO',
      subject: '$DEFAULT_SUBJECT',
      to: '$DEFAULT_RECIPIENTS',
      attachLog: true
}
